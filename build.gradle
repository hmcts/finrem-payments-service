buildscript {
    ext {
        springBootVersion = '2.3.11.RELEASE'
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath group: 'org.sonarsource.scanner.gradle', name: 'sonarqube-gradle-plugin', version: '3.0'
        classpath("net.serenity-bdd:serenity-gradle-plugin:2.2.12")
    }
}

plugins {
    id 'application'
    id 'checkstyle'
    id 'com.github.ben-manes.versions' version '0.36.0'
    id 'io.franzbecker.gradle-lombok' version '4.0.0'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id "info.solidsoft.pitest" version "1.5.1"
    id 'jacoco'
    id 'org.owasp.dependencycheck' version '6.2.0'
    id 'org.sonarqube' version '2.8'
    id 'org.springframework.boot' version '2.3.11.RELEASE'
    id 'au.com.dius.pact' version '4.1.0'
}

apply plugin: 'io.spring.dependency-management'
apply plugin: 'info.solidsoft.pitest'
apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'org.owasp.dependencycheck'
apply plugin: 'org.sonarqube'
apply plugin: 'org.springframework.boot'
apply plugin: 'net.serenity-bdd.aggregator'
group = 'uk.gov.hmcts.reform.finrem'
version = '0.0.1'
mainClassName = 'uk.gov.hmcts.reform.finrem.payments.PaymentsApplication'
sourceCompatibility = 11
targetCompatibility = 11

repositories {
    jcenter()
    maven { url "https://dl.bintray.com/hmcts/hmcts-maven" }
    maven { url 'https://repo.spring.io/libs-milestone' }
}

sourceSets {
    testSmoke {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir file('src/smokeTest/java')
        }
        resources.srcDir file('src/smokeTest/resources')
    }

    test {
        java.srcDir 'src/test/java'
        resources.srcDir 'src/test/resources'
    }

    functional {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDirs = ['src/functionalTests/java']
        }
        resources {
            srcDirs = ['src/functionalTests/resources']
        }
    }

    contract {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir file('src/contractTest/java')
        }
        resources.srcDir file('src/contractTest/resources')
    }
}

configurations {
    functionalImplementation.extendsFrom testImplementation
    functionalRuntime.extendsFrom testRuntime
}

def versions = [
    bouncycastle            : '1.61',
    commonsBeanUtils        : '1.9.4',
    commonsLang3            : '3.11',
    commonsIo               : '2.7',
    guava                   : '30.1-jre',
    javaxWsRs               : '2.1.1',
    jsonAssert              : '1.5.0',
    junit                   : '4.13.1',
    lombok                  : '1.18.12',
    mockito                 : '3.4.4',
    pact_version            : '4.1.11',
    puppyCrawl              : '8.29',
    reformLogging           : '5.1.7',
    reformPropertiesVolume  : '0.1.0',
    restAssured             : '3.0.3',
    serenity                : '2.2.12',
    serenityCucumber        : '1.9.51',
    serviceTokenGenerator   : '1.0.4',
    sonarPitest             : '0.5',
    springfoxSwagger        : '2.9.2',
    springRetry             : '1.3.0',
    tomcat                  : '9.0.43',
    wiremock                : '2.27.2'
]

dependencyManagement {
    dependencies {
        // CVE-2019-17563
        dependencySet(group: 'org.apache.tomcat.embed', version: versions.tomcat) {
            entry 'tomcat-embed-core'
            entry 'tomcat-embed-el'
            entry 'tomcat-embed-websocket'
        }
        // CVE-2019-10086
        dependency group: 'commons-beanutils', name: 'commons-beanutils', version: versions.commonsBeanUtils
        // CVE-2018-10237
        dependency group: 'com.google.guava', name: 'guava', version: versions.guava
        // CVE-2020-26939
        dependency group: 'org.bouncycastle', name: 'bcprov-jdk15on', version: versions.bouncycastle
        // CVE-2020-13956
        dependencySet(group: 'org.apache.httpcomponents', version: '4.5.13') {
            entry 'httpclient'
            entry 'fluent-hc'
        }
        // CVE-2020-17521
        dependencySet(group: 'org.codehaus.groovy', version: '2.5.14') {
            entry 'groovy'
            entry 'groovy-json'
        }
        // CVE-2020-15250
        dependency group: 'junit', name: 'junit', version: versions.junit
    }
}

dependencies {
    implementation("org.springframework.boot:spring-boot-starter-actuator")
    implementation("org.springframework.boot:spring-boot-configuration-processor")
    implementation group: 'com.sun.xml.bind', name: 'jaxb-osgi', version: '2.3.3'
    implementation group: 'commons-io', name: 'commons-io', version: versions.commonsIo
    implementation group: 'io.springfox', name: 'springfox-swagger2', version: versions.springfoxSwagger
    implementation group: 'io.springfox', name: 'springfox-swagger-ui', version: versions.springfoxSwagger
    implementation group: 'javax.ws.rs', name: 'javax.ws.rs-api', version: versions.javaxWsRs
    implementation group: 'org.projectlombok', name: 'lombok', version: versions.lombok
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
    implementation group: 'org.springframework.retry', name: 'spring-retry', version: versions.springRetry
    implementation group: 'uk.gov.hmcts.reform', name: 'logging-appinsights', version: versions.reformLogging
    implementation group: 'uk.gov.hmcts.reform', name: 'properties-volume-spring-boot-starter', version: versions.reformPropertiesVolume
    implementation group: 'uk.gov.hmcts.reform', name: 'service-auth-provider-client', version: versions.serviceTokenGenerator
    implementation group: 'org.codehaus.sonar-plugins', name: 'sonar-pitest-plugin', version: versions.sonarPitest
    implementation 'org.jetbrains:annotations:20.1.0'

    testImplementation('org.springframework.boot:spring-boot-starter-test')
    testImplementation group: 'com.github.tomakehurst', name: 'wiremock', version: versions.wiremock

    testSmokeImplementation group: 'io.rest-assured', name: 'rest-assured', version: versions.restAssured
    testSmokeImplementation sourceSets.main.runtimeClasspath
    testSmokeImplementation sourceSets.test.runtimeClasspath

    functionalImplementation group: 'io.rest-assured', name: 'rest-assured', version: versions.restAssured
    functionalImplementation group: 'junit', name: 'junit', version: versions.junit
    functionalImplementation group: 'net.serenity-bdd', name: 'serenity-core', version: versions.serenity
    functionalImplementation group: 'net.serenity-bdd', name: 'serenity-cucumber', version: versions.serenityCucumber
    functionalImplementation group: 'net.serenity-bdd', name: 'serenity-junit', version: versions.serenity
    functionalImplementation group: 'net.serenity-bdd', name: 'serenity-rest-assured', version: versions.serenity
    functionalImplementation group: 'net.serenity-bdd', name: 'serenity-spring', version: versions.serenity
    functionalImplementation group: 'org.apache.commons', name: 'commons-lang3', version: versions.commonsLang3
    functionalImplementation group: 'org.skyscreamer', name: 'jsonassert', version: versions.jsonAssert
    functionalImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test'
    functionalImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'

    contractCompile group: 'au.com.dius.pact.consumer', name: 'junit', version: versions.pact_version
    contractCompile group: 'au.com.dius.pact.consumer', name: 'java8', version: versions.pact_version
    contractRuntime group: 'au.com.dius.pact.consumer', name: 'junit', version: versions.pact_version
    contractRuntime group: 'au.com.dius.pact.consumer', name: 'java8', version: versions.pact_version

    contractCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test'

    contractImplementation sourceSets.main.runtimeClasspath
    contractImplementation sourceSets.test.runtimeClasspath
}

def sonarExclusions = [
        '**/uk/gov/hmcts/reform/finrem/payments/config/**',
        '**/uk/gov/hmcts/reform/finrem/payments/model/**',
        '**/uk/gov/hmcts/reform/finrem/payments/PaymentsApplication'
]

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
    // Specifies if the build should be failed if a CVSS score above a specified level is identified.
    // range of 0-10 fails the build, anything greater and it doesn't fail the build
    failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
    suppressionFile = 'dependency-check-suppressions.xml'
    analyzers {
        // Disable scanning of .NET related binaries
        assemblyEnabled = false
    }
}

checkstyle.toolVersion = '8.32'
checkstyle.configFile = new File(rootDir, "checkstyle.xml")
checkstyle.maxWarnings(0)

// make build fail on Checkstyle issues (https://github.com/gradle/gradle/issues/881)
tasks.withType(Checkstyle).each { checkstyleTask ->
    checkstyleTask.doLast {
        reports.all { report ->
            def outputFile = report.destination
            if (outputFile.exists() && outputFile.text.contains("<error ")) {
                throw new GradleException("There were checkstyle warnings! For more info check $outputFile")
            }
        }
    }
}

jacocoTestReport {
    executionData(test)
    reports {
        xml.enabled = true
        csv.enabled = false
        xml.destination file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.8
            }
        }
    }
}

project.tasks['sonarqube'].dependsOn jacocoTestReport

sonarqube {
    properties {
        property "sonar.projectKey", "finrem-payment-service"
        property "sonar.exclusions", sonarExclusions.join(', ')
        property "sonar.dynamicAnalysis", "reuseReports"
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.coverage.jacoco.xmlReportPaths", "${jacocoTestReport.reports.xml.destination.path}"
        property "sonar.dependencyCheck.reportPath", "${project.buildDir}/reports/dependency-check-report.xml"
        property "sonar.pitest.mode", "reuseReport"
        property "sonar.pitest.reportsDirectory", "build/reports/pitest"
    }
}

pitest {
    targetClasses.set( ['uk.gov.hmcts.reform.finrem.payments.*'])
    excludedClasses.set([
            'uk.gov.hmcts.reform.finrem.payments.PaymentsApplication',
            'uk.gov.hmcts.reform.finrem.payments.model.*',
            'uk.gov.hmcts.reform.finrem.payments.config.*',
            'uk.gov.hmcts.reform.finrem.payments.controllers.PaymentByAccountStub'])
    threads.set(4)
    outputFormats.set(['XML', 'HTML'])
    timestampedReports.set(false)
    mutationThreshold.set(80)
}

bootJar {
    manifest {
        attributes 'Implementation-Title': project.name,
                'Implementation-Version': project.version
    }
    archiveFileName = 'finrem-payment-service.jar'
}

task smoke(type: Test, description: 'Runs the smoke tests.', group: 'Verification') {
    testClassesDirs = sourceSets.testSmoke.output.classesDirs
    classpath = sourceSets.testSmoke.runtimeClasspath
    finalizedBy aggregate
}

task functional(type: Test) {
    description = "Runs functional Tests"
    setTestClassesDirs(sourceSets.functional.output.classesDirs)
    setClasspath(sourceSets.functional.runtimeClasspath)
    finalizedBy aggregate
}

task contract(type: Test) {
    description = "Runs Contract Tests"
    setTestClassesDirs(sourceSets.contract.output.classesDirs)
    setClasspath(sourceSets.contract.runtimeClasspath)
    finalizedBy aggregate
}

project.ext {
    pacticipant = 'fr_paymentService'
    pacticipantVersion = getCheckedOutGitCommitHash()
}

task runAndPublishConsumerPactTests(type: Test) {
    logger.lifecycle("Runs pact Tests")
    testClassesDirs = sourceSets.contract.output.classesDirs
    classpath = sourceSets.contract.runtimeClasspath

}

runAndPublishConsumerPactTests.finalizedBy pactPublish

def getCheckedOutGitCommitHash() {
    'git rev-parse --verify --short HEAD'.execute().text.trim()
}


pact {
    broker {
        pactBrokerUrl = System.getenv("PACT_BROKER_FULL_URL") ?: 'http://localhost:80'
    }
    publish {
        pactDirectory = 'pacts'
        tags = [System.getenv("PACT_BRANCH_NAME") ?: 'Dev']
        version = project.pacticipantVersion
    }
}
